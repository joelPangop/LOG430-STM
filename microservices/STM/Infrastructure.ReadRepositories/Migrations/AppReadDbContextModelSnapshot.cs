// <auto-generated />
using System;
using Infrastructure.ReadRepositories;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.ReadRepositories.Migrations
{
    [DbContext(typeof(AppReadDbContext))]
    partial class AppReadDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Application.Dtos.ScheduledStopDto", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<TimeSpan>("DepartureTimespan")
                        .HasColumnType("interval");

                    b.Property<string>("StopId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StopSequence")
                        .HasColumnType("integer");

                    b.Property<string>("TripId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TripId");

                    b.ToTable("ScheduledStopDto");
                });

            modelBuilder.Entity("Domain.Aggregates.Bus.Bus", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("CurrentStopIndex")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TripId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Bus");
                });

            modelBuilder.Entity("Domain.Aggregates.Ride.Ride", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BusId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DepartureId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DepartureReachedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DestinationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstRecordedStopId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TrackingComplete")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("TripBegunTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Ride");
                });

            modelBuilder.Entity("Domain.Aggregates.Stop.Stop", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Stop");
                });

            modelBuilder.Entity("Domain.Aggregates.Stop.Stop", b =>
                {
                    b.OwnsOne("Domain.ValueObjects.Position", "Position", b1 =>
                        {
                            b1.Property<string>("StopId")
                                .HasColumnType("text");

                            b1.Property<double>("Latitude")
                                .HasColumnType("double precision");

                            b1.Property<double>("Longitude")
                                .HasColumnType("double precision");

                            b1.HasKey("StopId");

                            b1.ToTable("Stop");

                            b1.WithOwner()
                                .HasForeignKey("StopId");
                        });

                    b.Navigation("Position")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
