services:
          
  nodecontroller:
    image: log430/nodecontroller:latest
    container_name: NodeController
    restart: always
    ports:
      - '${NODE_CONTROLLER_PORT}:8080'
      - '4300-4310:4300-4310'
    environment:
      TEAM_NAME: '${TEAM_NAME}'
      STUDENT_NAME: '${STUDENT_NAME}'
      GROUP: '${GROUP}'
      SECRET: '${SECRET}'
      INGRESS_ADDRESS: '${INGRESS_ADDRESS}'
      INGRESS_PORT: '${INGRESS_PORT}'
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      MQ_SERVICE_NAME: EventStream
      CUSTOM_CONTAINER_PORTS_DISCOVERY: 5672,5432,80,6379
      BRIDGE_PORT: 32674
      # DEBUG: true
      # Trace > Information > Error
      Logging__LogLevel__Default: Trace
      CONNECT_TO_INGRESS: true
    volumes: 
      - /var/run/docker.sock:/var/run/docker.sock
      
  postgres:
    image: postgres:latest
    ports:
      - 5432:5432
    volumes:
      - data-volume:/apps/postgres/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_DB: '${POSTGRES_DB}'
      ID: BD
    labels:
      Artifact_Category: Database
      
  redis:
    image: redis:latest  # Image officielle de Redis
    container_name: redis-server
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data  # Persister les donnÃ©es de Redis dans un volume
    environment:
      ID: redis 
    labels:
      Artifact_Category: Database

  event-store:
    container_name: EventStream
    image: cluster_mq
    restart: always
    hostname: EventStream
    build:
      context: ../ClusterRabbitMq/
      dockerfile: Dockerfile
    ports:
      - '32771:5672'
      - '30001:15672'
      - '25673:25672'
    environment:
      ID: EventStream
      RABBITMQ_ERLANG_COOKIE_FILE: /var/lib/rabbitmq/.erlang.cookie
    labels:
      Artifact_Category: Connector
      Replicas: EventStream

  routetimeprovider:
    container_name: RouteTimeProvider
    image: routetimeprovider
    restart: always
    build:
      context: ../RouteTimeProvider
      dockerfile: /RouteTimeProvider/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      ID: RouteTimeProvider
      API_KEY: '${TOMTOM}'
    ports:
      - '32772:8080'
    labels:
      ARTIFACT_CATEGORY: Computation
      Replicas: 3

  tripcomparator:
    container_name: TripComparator
    image: tripcomparator
    restart: always
    build:
      context: ../TripComparator
      dockerfile: /Configuration/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      ID: TripComparator
      MQ_SERVICE_NAME: EventStream
    ports:
      - '32773:8080'
    labels:
      ARTIFACT_CATEGORY: Computation
      Replicas: 3

  stm:
    container_name: STM
    image: stm
    restart: always
    build:
      context: ../STM
      dockerfile: /Configuration/Dockerfile
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      ID: STM
      API_KEY: '${STM}'
      # HIGH (3gb) > MEDIUM (1.5gb) > LOW (300mb)
      MEMORY_CONSUMPTION: LOW
      POSTGRES_PASSWORD: '${POSTGRES_PASSWORD}'
      POSTGRES_USER: '${POSTGRES_USER}'
      POSTGRES_DB: '${POSTGRES_DB}'

    ports:
      - '32774:8080'
    labels:
      ARTIFACT_CATEGORY: Computation
      Replicas: 3

    depends_on:
      - postgres
  
  redondancymanager:
    container_name: RedondancyManager
    image: redondancymanager
    restart: always
    build:
      context: ../RedondancyManager
      dockerfile: /RedondancyManager/Dockerfile
    command: ["./RedondancyManager/wait-for-it.sh", "tripcomparator", "8080", "30", "--", "dotnet", "RedondancyManager.dll"]
    environment:
      SERVICES_ADDRESS: '${SERVICES_ADDRESS}'
      NODE_CONTROLLER_PORT: '${NODE_CONTROLLER_PORT}'
      ID: RedondancyManager
    ports:
      - '6000:80'
    labels:
      ARTIFACT_CATEGORY: Computation
      Replicas: 1
    #volumes:
    #  - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - tripcomparator
      - stm
    
volumes:
  data-volume:
  redis_data: